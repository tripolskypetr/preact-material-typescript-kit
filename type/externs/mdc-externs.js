/**
 * @fileoverview Externs for mdc generated by generate-closure-externs in browser runtime
 * @see https://gist.github.com/tripolskypetr/ed33439520b59c5077cbdf5d0ff4ea62
 * @externs
 */
var mdc = {
  autoInit: function () {},
  base: {
    MDCComponent: {
      initialize: function () {},
      getDefaultFoundation: function () {},
      initialSyncWithDOM: function () {},
      destroy: function () {},
      listen: function () {},
      unlisten: function () {},
      emit: function () {},
    },
    default: {
      initialize: function () {},
      getDefaultFoundation: function () {},
      initialSyncWithDOM: function () {},
      destroy: function () {},
      listen: function () {},
      unlisten: function () {},
      emit: function () {},
    },
    MDCFoundation: { init: function () {}, destroy: function () {} },
  },
  checkbox: {
    MDCCheckbox: function () {},
    cssClasses: {
      ANIM_CHECKED_INDETERMINATE: function () {},
      ANIM_CHECKED_UNCHECKED: function () {},
      ANIM_INDETERMINATE_CHECKED: function () {},
      ANIM_INDETERMINATE_UNCHECKED: function () {},
      ANIM_UNCHECKED_CHECKED: function () {},
      ANIM_UNCHECKED_INDETERMINATE: function () {},
      BACKGROUND: function () {},
      CHECKED: function () {},
      CHECKMARK: function () {},
      CHECKMARK_PATH: function () {},
      DISABLED: function () {},
      INDETERMINATE: function () {},
      MIXEDMARK: function () {},
      NATIVE_CONTROL: function () {},
      ROOT: function () {},
      SELECTED: function () {},
      UPGRADED: function () {},
    },
    strings: {
      ARIA_CHECKED_ATTR: function () {},
      ARIA_CHECKED_INDETERMINATE_VALUE: function () {},
      NATIVE_CONTROL_SELECTOR: function () {},
      TRANSITION_STATE_CHECKED: function () {},
      TRANSITION_STATE_INDETERMINATE: function () {},
      TRANSITION_STATE_INIT: function () {},
      TRANSITION_STATE_UNCHECKED: function () {},
    },
    numbers: { ANIM_END_LATCH_MS: function () {} },
    MDCCheckboxFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setDisabled: function () {},
      handleAnimationEnd: function () {},
      handleChange: function () {},
      transitionCheckState_: function () {},
      determineCheckState_: function () {},
      getTransitionAnimationClass_: function () {},
      updateAriaChecked_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setDisabled: function () {},
      handleAnimationEnd: function () {},
      handleChange: function () {},
      transitionCheckState_: function () {},
      determineCheckState_: function () {},
      getTransitionAnimationClass_: function () {},
      updateAriaChecked_: function () {},
    },
  },
  chips: {
    MDCChip: function () {},
    MDCChipFoundation: {
      constructor: function () {},
      isSelected: function () {},
      setSelected: function () {},
      setSelectedFromChipSet: function () {},
      getShouldRemoveOnTrailingIconClick: function () {},
      setShouldRemoveOnTrailingIconClick: function () {},
      getDimensions: function () {},
      beginExit: function () {},
      handleInteraction: function () {},
      handleTransitionEnd: function () {},
      handleTrailingIconInteraction: function () {},
      handleKeydown: function () {},
      removeFocus: function () {},
      focusPrimaryAction: function () {},
      focusTrailingAction: function () {},
      focusNextAction_: function () {},
      getEvtSource_: function () {},
      getDirection_: function () {},
      focusPrimaryAction_: function () {},
      focusTrailingAction_: function () {},
      removeFocus_: function () {},
      removeChip_: function () {},
      shouldHandleInteraction_: function () {},
      shouldRemoveChip_: function () {},
      setSelected_: function () {},
      notifySelection_: function () {},
      notifyIgnoredSelection_: function () {},
    },
    default: {
      constructor: function () {},
      isSelected: function () {},
      setSelected: function () {},
      setSelectedFromChipSet: function () {},
      getShouldRemoveOnTrailingIconClick: function () {},
      setShouldRemoveOnTrailingIconClick: function () {},
      getDimensions: function () {},
      beginExit: function () {},
      handleInteraction: function () {},
      handleTransitionEnd: function () {},
      handleTrailingIconInteraction: function () {},
      handleKeydown: function () {},
      removeFocus: function () {},
      focusPrimaryAction: function () {},
      focusTrailingAction: function () {},
      focusNextAction_: function () {},
      getEvtSource_: function () {},
      getDirection_: function () {},
      focusPrimaryAction_: function () {},
      focusTrailingAction_: function () {},
      removeFocus_: function () {},
      removeChip_: function () {},
      shouldHandleInteraction_: function () {},
      shouldRemoveChip_: function () {},
      setSelected_: function () {},
      notifySelection_: function () {},
      notifyIgnoredSelection_: function () {},
    },
    chipCssClasses: {
      CHECKMARK: function () {},
      CHIP_EXIT: function () {},
      DELETABLE: function () {},
      HIDDEN_LEADING_ICON: function () {},
      LEADING_ICON: function () {},
      PRIMARY_ACTION: function () {},
      SELECTED: function () {},
      TEXT: function () {},
      TRAILING_ACTION: function () {},
      TRAILING_ICON: function () {},
    },
    chipStrings: {
      ADDED_ANNOUNCEMENT_ATTRIBUTE: function () {},
      ARIA_CHECKED: function () {},
      ARROW_DOWN_KEY: function () {},
      ARROW_LEFT_KEY: function () {},
      ARROW_RIGHT_KEY: function () {},
      ARROW_UP_KEY: function () {},
      BACKSPACE_KEY: function () {},
      CHECKMARK_SELECTOR: function () {},
      DELETE_KEY: function () {},
      END_KEY: function () {},
      ENTER_KEY: function () {},
      ENTRY_ANIMATION_NAME: function () {},
      HOME_KEY: function () {},
      INTERACTION_EVENT: function () {},
      LEADING_ICON_SELECTOR: function () {},
      NAVIGATION_EVENT: function () {},
      PRIMARY_ACTION_SELECTOR: function () {},
      REMOVED_ANNOUNCEMENT_ATTRIBUTE: function () {},
      REMOVAL_EVENT: function () {},
      SELECTION_EVENT: function () {},
      SPACEBAR_KEY: function () {},
      TAB_INDEX: function () {},
      TRAILING_ACTION_SELECTOR: function () {},
      TRAILING_ICON_INTERACTION_EVENT: function () {},
      TRAILING_ICON_SELECTOR: function () {},
    },
    MDCChipSet: function () {},
    MDCChipSetFoundation: {
      constructor: function () {},
      getSelectedChipIds: function () {},
      select: function () {},
      handleChipInteraction: function () {},
      handleChipSelection: function () {},
      handleChipRemoval: function () {},
      handleChipNavigation: function () {},
      focusChipAction_: function () {},
      getDirection_: function () {},
      deselect_: function () {},
      deselectAndNotifyClients_: function () {},
      toggleSelect_: function () {},
      removeFocusFromChipsExcept_: function () {},
      selectAndNotifyClients_: function () {},
      select_: function () {},
    },
    chipSetCssClasses: { CHOICE: function () {}, FILTER: function () {} },
    chipSetStrings: { CHIP_SELECTOR: function () {} },
  },
  dataTable: {
    MDCDataTable: {
      constructor: function () {},
      initialize: function () {},
      initialSyncWithDOM: function () {},
      layout: function () {},
      getRows: function () {},
      getSelectedRowIds: function () {},
      setSelectedRowIds: function () {},
      destroy: function () {},
      getDefaultFoundation: function () {},
      getRowByIndex_: function () {},
      getRowIdByIndex_: function () {},
    },
    MDCDataTableFoundation: {
      constructor: function () {},
      layout: function () {},
      layoutAsync: function () {},
      getRows: function () {},
      setSelectedRowIds: function () {},
      getSelectedRowIds: function () {},
      handleHeaderRowCheckboxChange: function () {},
      handleRowCheckboxChange: function () {},
      setHeaderRowCheckboxState_: function () {},
      selectRowAtIndex_: function () {},
    },
    cssClasses: {
      CELL: function () {},
      CELL_NUMERIC: function () {},
      CONTENT: function () {},
      HEADER_ROW: function () {},
      HEADER_ROW_CHECKBOX: function () {},
      ROOT: function () {},
      ROW: function () {},
      ROW_CHECKBOX: function () {},
      ROW_SELECTED: function () {},
    },
    strings: {
      ARIA_SELECTED: function () {},
      DATA_ROW_ID_ATTR: function () {},
      HEADER_ROW_CHECKBOX_SELECTOR: function () {},
      ROW_CHECKBOX_SELECTOR: function () {},
      ROW_SELECTED_SELECTOR: function () {},
      ROW_SELECTOR: function () {},
    },
    events: {
      ROW_SELECTION_CHANGED: function () {},
      SELECTED_ALL: function () {},
      UNSELECTED_ALL: function () {},
    },
  },
  dialog: {
    util: {
      createFocusTrapInstance: function () {},
      isScrollable: function () {},
      areTopsMisaligned: function () {},
    },
    MDCDialog: function () {},
    cssClasses: {
      CLOSING: function () {},
      OPEN: function () {},
      OPENING: function () {},
      SCROLLABLE: function () {},
      SCROLL_LOCK: function () {},
      STACKED: function () {},
    },
    strings: {
      ACTION_ATTRIBUTE: function () {},
      BUTTON_DEFAULT_ATTRIBUTE: function () {},
      BUTTON_SELECTOR: function () {},
      CLOSED_EVENT: function () {},
      CLOSE_ACTION: function () {},
      CLOSING_EVENT: function () {},
      CONTAINER_SELECTOR: function () {},
      CONTENT_SELECTOR: function () {},
      DESTROY_ACTION: function () {},
      INITIAL_FOCUS_ATTRIBUTE: function () {},
      OPENED_EVENT: function () {},
      OPENING_EVENT: function () {},
      SCRIM_SELECTOR: function () {},
      SUPPRESS_DEFAULT_PRESS_SELECTOR: function () {},
      SURFACE_SELECTOR: function () {},
    },
    numbers: {
      DIALOG_ANIMATION_CLOSE_TIME_MS: function () {},
      DIALOG_ANIMATION_OPEN_TIME_MS: function () {},
    },
    MDCDialogFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      open: function () {},
      close: function () {},
      isOpen: function () {},
      getEscapeKeyAction: function () {},
      setEscapeKeyAction: function () {},
      getScrimClickAction: function () {},
      setScrimClickAction: function () {},
      getAutoStackButtons: function () {},
      setAutoStackButtons: function () {},
      layout: function () {},
      handleClick: function () {},
      handleKeydown: function () {},
      handleDocumentKeydown: function () {},
      layoutInternal_: function () {},
      handleAnimationTimerEnd_: function () {},
      runNextAnimationFrame_: function () {},
      detectStackedButtons_: function () {},
      detectScrollableContent_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      open: function () {},
      close: function () {},
      isOpen: function () {},
      getEscapeKeyAction: function () {},
      setEscapeKeyAction: function () {},
      getScrimClickAction: function () {},
      setScrimClickAction: function () {},
      getAutoStackButtons: function () {},
      setAutoStackButtons: function () {},
      layout: function () {},
      handleClick: function () {},
      handleKeydown: function () {},
      handleDocumentKeydown: function () {},
      layoutInternal_: function () {},
      handleAnimationTimerEnd_: function () {},
      runNextAnimationFrame_: function () {},
      detectStackedButtons_: function () {},
      detectScrollableContent_: function () {},
    },
  },
  dom: {
    events: { applyPassive: function () {} },
    focusTrap: {
      FocusTrap: {
        trapFocus: function () {},
        releaseFocus: function () {},
        wrapTabFocus: function () {},
        focusInitialElement: function () {},
        getFocusableElements: function () {},
        createSentinel: function () {},
      },
    },
    ponyfill: {
      closest: function () {},
      matches: function () {},
      estimateScrollWidth: function () {},
    },
  },
  drawer: {
    util: { createFocusTrapInstance: function () {} },
    MDCDrawer: function () {},
    cssClasses: {
      ANIMATE: function () {},
      CLOSING: function () {},
      DISMISSIBLE: function () {},
      MODAL: function () {},
      OPEN: function () {},
      OPENING: function () {},
      ROOT: function () {},
    },
    strings: {
      APP_CONTENT_SELECTOR: function () {},
      CLOSE_EVENT: function () {},
      OPEN_EVENT: function () {},
      SCRIM_SELECTOR: function () {},
    },
    MDCDismissibleDrawerFoundation: {
      constructor: function () {},
      destroy: function () {},
      open: function () {},
      close: function () {},
      isOpen: function () {},
      isOpening: function () {},
      isClosing: function () {},
      handleKeydown: function () {},
      handleTransitionEnd: function () {},
      opened_: function () {},
      closed_: function () {},
      runNextAnimationFrame_: function () {},
      isElement_: function () {},
    },
    default: {
      constructor: function () {},
      destroy: function () {},
      open: function () {},
      close: function () {},
      isOpen: function () {},
      isOpening: function () {},
      isClosing: function () {},
      handleKeydown: function () {},
      handleTransitionEnd: function () {},
      opened_: function () {},
      closed_: function () {},
      runNextAnimationFrame_: function () {},
      isElement_: function () {},
    },
    MDCModalDrawerFoundation: {
      constructor: function () {},
      handleScrimClick: function () {},
      opened_: function () {},
      closed_: function () {},
    },
  },
  floatingLabel: {
    MDCFloatingLabel: {
      constructor: function () {},
      shake: function () {},
      float: function () {},
      getWidth: function () {},
      getDefaultFoundation: function () {},
    },
    cssClasses: {
      LABEL_FLOAT_ABOVE: function () {},
      LABEL_SHAKE: function () {},
      ROOT: function () {},
    },
    MDCFloatingLabelFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      getWidth: function () {},
      shake: function () {},
      float: function () {},
      handleShakeAnimationEnd_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      getWidth: function () {},
      shake: function () {},
      float: function () {},
      handleShakeAnimationEnd_: function () {},
    },
  },
  formField: {
    MDCFormField: function () {},
    cssClasses: { ROOT: function () {} },
    strings: { LABEL_SELECTOR: function () {} },
    MDCFormFieldFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      handleClick_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      handleClick_: function () {},
    },
  },
  iconButton: {
    MDCIconButtonToggle: function () {},
    cssClasses: { ICON_BUTTON_ON: function () {}, ROOT: function () {} },
    strings: { ARIA_PRESSED: function () {}, CHANGE_EVENT: function () {} },
    MDCIconButtonToggleFoundation: {
      constructor: function () {},
      init: function () {},
      handleClick: function () {},
      isOn: function () {},
      toggle: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      handleClick: function () {},
      isOn: function () {},
      toggle: function () {},
    },
  },
  lineRipple: {
    MDCLineRipple: {
      constructor: function () {},
      activate: function () {},
      deactivate: function () {},
      setRippleCenter: function () {},
      getDefaultFoundation: function () {},
    },
    cssClasses: {
      LINE_RIPPLE_ACTIVE: function () {},
      LINE_RIPPLE_DEACTIVATING: function () {},
    },
    MDCLineRippleFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      activate: function () {},
      setRippleCenter: function () {},
      deactivate: function () {},
      handleTransitionEnd: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      activate: function () {},
      setRippleCenter: function () {},
      deactivate: function () {},
      handleTransitionEnd: function () {},
    },
  },
  linearProgress: {
    MDCLinearProgress: {
      constructor: function () {},
      determinate: function () {},
      progress: function () {},
      buffer: function () {},
      reverse: function () {},
      open: function () {},
      close: function () {},
      getDefaultFoundation: function () {},
    },
    cssClasses: {
      CLOSED_CLASS: function () {},
      INDETERMINATE_CLASS: function () {},
      REVERSED_CLASS: function () {},
    },
    strings: {
      ARIA_VALUENOW: function () {},
      BUFFER_SELECTOR: function () {},
      PRIMARY_BAR_SELECTOR: function () {},
    },
    MDCLinearProgressFoundation: {
      constructor: function () {},
      init: function () {},
      setDeterminate: function () {},
      setProgress: function () {},
      setBuffer: function () {},
      setReverse: function () {},
      open: function () {},
      close: function () {},
      setScale_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      setDeterminate: function () {},
      setProgress: function () {},
      setBuffer: function () {},
      setReverse: function () {},
      open: function () {},
      close: function () {},
      setScale_: function () {},
    },
  },
  list: {
    MDCList: function () {},
    cssClasses: {
      LIST_ITEM_ACTIVATED_CLASS: function () {},
      LIST_ITEM_CLASS: function () {},
      LIST_ITEM_DISABLED_CLASS: function () {},
      LIST_ITEM_SELECTED_CLASS: function () {},
      ROOT: function () {},
    },
    strings: {
      ACTION_EVENT: function () {},
      ARIA_CHECKED: function () {},
      ARIA_CHECKED_CHECKBOX_SELECTOR: function () {},
      ARIA_CHECKED_RADIO_SELECTOR: function () {},
      ARIA_CURRENT: function () {},
      ARIA_DISABLED: function () {},
      ARIA_ORIENTATION: function () {},
      ARIA_ORIENTATION_HORIZONTAL: function () {},
      ARIA_ROLE_CHECKBOX_SELECTOR: function () {},
      ARIA_SELECTED: function () {},
      CHECKBOX_RADIO_SELECTOR: function () {},
      CHECKBOX_SELECTOR: function () {},
      CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: function () {},
      FOCUSABLE_CHILD_ELEMENTS: function () {},
      RADIO_SELECTOR: function () {},
    },
    numbers: { UNSET_INDEX: function () {} },
    MDCListFoundation: {
      constructor: function () {},
      layout: function () {},
      setWrapFocus: function () {},
      setVerticalOrientation: function () {},
      setSingleSelection: function () {},
      setUseActivatedClass: function () {},
      getSelectedIndex: function () {},
      setSelectedIndex: function () {},
      handleFocusIn: function () {},
      handleFocusOut: function () {},
      handleKeydown: function () {},
      handleClick: function () {},
      focusNextElement: function () {},
      focusPrevElement: function () {},
      focusFirstElement: function () {},
      focusLastElement: function () {},
      setEnabled: function () {},
      preventDefaultEvent_: function () {},
      setSingleSelectionAtIndex_: function () {},
      setAriaForSingleSelectionAtIndex_: function () {},
      setRadioAtIndex_: function () {},
      setCheckboxAtIndex_: function () {},
      setTabindexAtIndex_: function () {},
      isSelectableList_: function () {},
      setTabindexToFirstSelectedItem_: function () {},
      isIndexValid_: function () {},
      isIndexInRange_: function () {},
      setSelectedIndexOnAction_: function () {},
      toggleCheckboxAtIndex_: function () {},
    },
    default: {
      constructor: function () {},
      layout: function () {},
      setWrapFocus: function () {},
      setVerticalOrientation: function () {},
      setSingleSelection: function () {},
      setUseActivatedClass: function () {},
      getSelectedIndex: function () {},
      setSelectedIndex: function () {},
      handleFocusIn: function () {},
      handleFocusOut: function () {},
      handleKeydown: function () {},
      handleClick: function () {},
      focusNextElement: function () {},
      focusPrevElement: function () {},
      focusFirstElement: function () {},
      focusLastElement: function () {},
      setEnabled: function () {},
      preventDefaultEvent_: function () {},
      setSingleSelectionAtIndex_: function () {},
      setAriaForSingleSelectionAtIndex_: function () {},
      setRadioAtIndex_: function () {},
      setCheckboxAtIndex_: function () {},
      setTabindexAtIndex_: function () {},
      isSelectableList_: function () {},
      setTabindexToFirstSelectedItem_: function () {},
      isIndexValid_: function () {},
      isIndexInRange_: function () {},
      setSelectedIndexOnAction_: function () {},
      toggleCheckboxAtIndex_: function () {},
    },
  },
  menuSurface: {
    util: { getTransformPropertyName: function () {} },
    MDCMenuSurface: {
      constructor: function () {},
      initialSyncWithDOM: function () {},
      destroy: function () {},
      isOpen: function () {},
      open: function () {},
      close: function () {},
      quickOpen: function () {},
      setIsHoisted: function () {},
      setMenuSurfaceAnchorElement: function () {},
      setFixedPosition: function () {},
      setAbsolutePosition: function () {},
      setAnchorCorner: function () {},
      setAnchorMargin: function () {},
      getDefaultFoundation: function () {},
    },
    cssClasses: {
      ANCHOR: function () {},
      ANIMATING_CLOSED: function () {},
      ANIMATING_OPEN: function () {},
      FIXED: function () {},
      OPEN: function () {},
      ROOT: function () {},
    },
    strings: {
      CLOSED_EVENT: function () {},
      OPENED_EVENT: function () {},
      FOCUSABLE_ELEMENTS: function () {},
    },
    numbers: {
      TRANSITION_OPEN_DURATION: function () {},
      TRANSITION_CLOSE_DURATION: function () {},
      MARGIN_TO_EDGE: function () {},
      ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: function () {},
    },
    CornerBit: {
      "1": function () {},
      "2": function () {},
      "4": function () {},
      "8": function () {},
      BOTTOM: function () {},
      CENTER: function () {},
      RIGHT: function () {},
      FLIP_RTL: function () {},
    },
    Corner: {
      "0": function () {},
      "1": function () {},
      "4": function () {},
      "5": function () {},
      "8": function () {},
      "9": function () {},
      12: function () {},
      13: function () {},
      TOP_LEFT: function () {},
      TOP_RIGHT: function () {},
      BOTTOM_LEFT: function () {},
      BOTTOM_RIGHT: function () {},
      TOP_START: function () {},
      TOP_END: function () {},
      BOTTOM_START: function () {},
      BOTTOM_END: function () {},
    },
    MDCMenuSurfaceFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setAnchorCorner: function () {},
      setAnchorMargin: function () {},
      setIsHoisted: function () {},
      setFixedPosition: function () {},
      setAbsolutePosition: function () {},
      setQuickOpen: function () {},
      isOpen: function () {},
      open: function () {},
      close: function () {},
      handleBodyClick: function () {},
      handleKeydown: function () {},
      autoPosition_: function () {},
      getAutoLayoutMeasurements_: function () {},
      getOriginCorner_: function () {},
      getMenuSurfaceMaxHeight_: function () {},
      getHorizontalOriginOffset_: function () {},
      getVerticalOriginOffset_: function () {},
      adjustPositionForHoistedElement_: function () {},
      maybeRestoreFocus_: function () {},
      hasBit_: function () {},
      setBit_: function () {},
      isFinite_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setAnchorCorner: function () {},
      setAnchorMargin: function () {},
      setIsHoisted: function () {},
      setFixedPosition: function () {},
      setAbsolutePosition: function () {},
      setQuickOpen: function () {},
      isOpen: function () {},
      open: function () {},
      close: function () {},
      handleBodyClick: function () {},
      handleKeydown: function () {},
      autoPosition_: function () {},
      getAutoLayoutMeasurements_: function () {},
      getOriginCorner_: function () {},
      getMenuSurfaceMaxHeight_: function () {},
      getHorizontalOriginOffset_: function () {},
      getVerticalOriginOffset_: function () {},
      adjustPositionForHoistedElement_: function () {},
      maybeRestoreFocus_: function () {},
      hasBit_: function () {},
      setBit_: function () {},
      isFinite_: function () {},
    },
  },
  menu: {
    Corner: {
      "0": function () {},
      "1": function () {},
      "4": function () {},
      "5": function () {},
      "8": function () {},
      "9": function () {},
      12: function () {},
      13: function () {},
      TOP_LEFT: function () {},
      TOP_RIGHT: function () {},
      BOTTOM_LEFT: function () {},
      BOTTOM_RIGHT: function () {},
      TOP_START: function () {},
      TOP_END: function () {},
      BOTTOM_START: function () {},
      BOTTOM_END: function () {},
    },
    MDCMenu: function () {},
    cssClasses: {
      MENU_SELECTED_LIST_ITEM: function () {},
      MENU_SELECTION_GROUP: function () {},
      ROOT: function () {},
    },
    strings: {
      ARIA_CHECKED_ATTR: function () {},
      ARIA_DISABLED_ATTR: function () {},
      CHECKBOX_SELECTOR: function () {},
      LIST_SELECTOR: function () {},
      SELECTED_EVENT: function () {},
    },
    numbers: { FOCUS_ROOT_INDEX: function () {} },
    DefaultFocusState: {
      "0": function () {},
      "1": function () {},
      "2": function () {},
      "3": function () {},
      NONE: function () {},
      LIST_ROOT: function () {},
      FIRST_ITEM: function () {},
      LAST_ITEM: function () {},
    },
    MDCMenuFoundation: {
      constructor: function () {},
      destroy: function () {},
      handleKeydown: function () {},
      handleItemAction: function () {},
      handleMenuSurfaceOpened: function () {},
      setDefaultFocusState: function () {},
      setSelectedIndex: function () {},
      setEnabled: function () {},
      validatedIndex_: function () {},
    },
    default: {
      constructor: function () {},
      destroy: function () {},
      handleKeydown: function () {},
      handleItemAction: function () {},
      handleMenuSurfaceOpened: function () {},
      setDefaultFocusState: function () {},
      setSelectedIndex: function () {},
      setEnabled: function () {},
      validatedIndex_: function () {},
    },
  },
  notchedOutline: {
    MDCNotchedOutline: {
      constructor: function () {},
      initialSyncWithDOM: function () {},
      notch: function () {},
      closeNotch: function () {},
      getDefaultFoundation: function () {},
    },
    strings: { NOTCH_ELEMENT_SELECTOR: function () {} },
    numbers: { NOTCH_ELEMENT_PADDING: function () {} },
    cssClasses: {
      NO_LABEL: function () {},
      OUTLINE_NOTCHED: function () {},
      OUTLINE_UPGRADED: function () {},
    },
    MDCNotchedOutlineFoundation: {
      constructor: function () {},
      notch: function () {},
      closeNotch: function () {},
    },
    default: {
      constructor: function () {},
      notch: function () {},
      closeNotch: function () {},
    },
  },
  radio: {
    MDCRadio: function () {},
    strings: { NATIVE_CONTROL_SELECTOR: function () {} },
    cssClasses: { DISABLED: function () {}, ROOT: function () {} },
    MDCRadioFoundation: {
      constructor: function () {},
      setDisabled: function () {},
    },
    default: { constructor: function () {}, setDisabled: function () {} },
  },
  ripple: {
    util: {
      supportsCssVariables: function () {},
      getNormalizedEventCoords: function () {},
    },
    MDCRipple: {
      constructor: function () {},
      unbounded: function () {},
      activate: function () {},
      deactivate: function () {},
      layout: function () {},
      getDefaultFoundation: function () {},
      initialSyncWithDOM: function () {},
      setUnbounded_: function () {},
    },
    cssClasses: {
      BG_FOCUSED: function () {},
      FG_ACTIVATION: function () {},
      FG_DEACTIVATION: function () {},
      ROOT: function () {},
      UNBOUNDED: function () {},
    },
    strings: {
      VAR_FG_SCALE: function () {},
      VAR_FG_SIZE: function () {},
      VAR_FG_TRANSLATE_END: function () {},
      VAR_FG_TRANSLATE_START: function () {},
      VAR_LEFT: function () {},
      VAR_TOP: function () {},
    },
    numbers: {
      DEACTIVATION_TIMEOUT_MS: function () {},
      FG_DEACTIVATION_MS: function () {},
      INITIAL_ORIGIN_SCALE: function () {},
      PADDING: function () {},
      TAP_DELAY_MS: function () {},
    },
    MDCRippleFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      activate: function () {},
      deactivate: function () {},
      layout: function () {},
      setUnbounded: function () {},
      handleFocus: function () {},
      handleBlur: function () {},
      supportsPressRipple_: function () {},
      defaultActivationState_: function () {},
      registerRootHandlers_: function () {},
      registerDeactivationHandlers_: function () {},
      deregisterRootHandlers_: function () {},
      deregisterDeactivationHandlers_: function () {},
      removeCssVars_: function () {},
      activate_: function () {},
      checkElementMadeActive_: function () {},
      animateActivation_: function () {},
      getFgTranslationCoordinates_: function () {},
      runDeactivationUXLogicIfReady_: function () {},
      rmBoundedActivationClasses_: function () {},
      resetActivationState_: function () {},
      deactivate_: function () {},
      animateDeactivation_: function () {},
      layoutInternal_: function () {},
      updateLayoutCssVars_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      activate: function () {},
      deactivate: function () {},
      layout: function () {},
      setUnbounded: function () {},
      handleFocus: function () {},
      handleBlur: function () {},
      supportsPressRipple_: function () {},
      defaultActivationState_: function () {},
      registerRootHandlers_: function () {},
      registerDeactivationHandlers_: function () {},
      deregisterRootHandlers_: function () {},
      deregisterDeactivationHandlers_: function () {},
      removeCssVars_: function () {},
      activate_: function () {},
      checkElementMadeActive_: function () {},
      animateActivation_: function () {},
      getFgTranslationCoordinates_: function () {},
      runDeactivationUXLogicIfReady_: function () {},
      rmBoundedActivationClasses_: function () {},
      resetActivationState_: function () {},
      deactivate_: function () {},
      animateDeactivation_: function () {},
      layoutInternal_: function () {},
      updateLayoutCssVars_: function () {},
    },
  },
  select: {
    MDCSelect: function () {},
    cssClasses: {
      ACTIVATED: function () {},
      DISABLED: function () {},
      FOCUSED: function () {},
      INVALID: function () {},
      OUTLINED: function () {},
      REQUIRED: function () {},
      ROOT: function () {},
      SELECTED_ITEM_CLASS: function () {},
      WITH_LEADING_ICON: function () {},
    },
    strings: {
      ARIA_CONTROLS: function () {},
      ARIA_SELECTED_ATTR: function () {},
      CHANGE_EVENT: function () {},
      LABEL_SELECTOR: function () {},
      LEADING_ICON_SELECTOR: function () {},
      LINE_RIPPLE_SELECTOR: function () {},
      MENU_SELECTOR: function () {},
      OUTLINE_SELECTOR: function () {},
      SELECTED_ITEM_SELECTOR: function () {},
      SELECTED_TEXT_SELECTOR: function () {},
      SELECT_ANCHOR_SELECTOR: function () {},
      VALUE_ATTR: function () {},
    },
    numbers: { LABEL_SCALE: function () {}, UNSET_INDEX: function () {} },
    MDCSelectFoundation: {
      constructor: function () {},
      getSelectedIndex: function () {},
      setSelectedIndex: function () {},
      setValue: function () {},
      getValue: function () {},
      getDisabled: function () {},
      setDisabled: function () {},
      setHelperTextContent: function () {},
      layout: function () {},
      handleMenuOpened: function () {},
      handleMenuClosed: function () {},
      handleChange: function () {},
      handleMenuItemAction: function () {},
      handleFocus: function () {},
      handleBlur: function () {},
      handleClick: function () {},
      handleKeydown: function () {},
      notchOutline: function () {},
      setLeadingIconAriaLabel: function () {},
      setLeadingIconContent: function () {},
      setValid: function () {},
      isValid: function () {},
      setRequired: function () {},
      getRequired: function () {},
      init: function () {},
      updateLabel_: function () {},
      blur_: function () {},
    },
    default: {
      constructor: function () {},
      getSelectedIndex: function () {},
      setSelectedIndex: function () {},
      setValue: function () {},
      getValue: function () {},
      getDisabled: function () {},
      setDisabled: function () {},
      setHelperTextContent: function () {},
      layout: function () {},
      handleMenuOpened: function () {},
      handleMenuClosed: function () {},
      handleChange: function () {},
      handleMenuItemAction: function () {},
      handleFocus: function () {},
      handleBlur: function () {},
      handleClick: function () {},
      handleKeydown: function () {},
      notchOutline: function () {},
      setLeadingIconAriaLabel: function () {},
      setLeadingIconContent: function () {},
      setValid: function () {},
      isValid: function () {},
      setRequired: function () {},
      getRequired: function () {},
      init: function () {},
      updateLabel_: function () {},
      blur_: function () {},
    },
    MDCSelectHelperText: {
      constructor: function () {},
      foundation: function () {},
      getDefaultFoundation: function () {},
    },
    MDCSelectHelperTextFoundation: {
      constructor: function () {},
      setContent: function () {},
      setPersistent: function () {},
      setValidation: function () {},
      showToScreenReader: function () {},
      setValidity: function () {},
      hide_: function () {},
    },
    helperTextCssClasses: {
      HELPER_TEXT_PERSISTENT: function () {},
      HELPER_TEXT_VALIDATION_MSG: function () {},
    },
    helperTextStrings: { ARIA_HIDDEN: function () {}, ROLE: function () {} },
    MDCSelectIcon: {
      constructor: function () {},
      foundation: function () {},
      getDefaultFoundation: function () {},
    },
    MDCSelectIconFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setDisabled: function () {},
      setAriaLabel: function () {},
      setContent: function () {},
      handleInteraction: function () {},
    },
    iconStrings: { ICON_EVENT: function () {}, ICON_ROLE: function () {} },
  },
  slider: {
    MDCSlider: function () {},
    cssClasses: {
      ACTIVE: function () {},
      DISABLED: function () {},
      DISCRETE: function () {},
      FOCUS: function () {},
      HAS_TRACK_MARKER: function () {},
      IN_TRANSIT: function () {},
      IS_DISCRETE: function () {},
    },
    strings: {
      ARIA_DISABLED: function () {},
      ARIA_VALUEMAX: function () {},
      ARIA_VALUEMIN: function () {},
      ARIA_VALUENOW: function () {},
      CHANGE_EVENT: function () {},
      INPUT_EVENT: function () {},
      PIN_VALUE_MARKER_SELECTOR: function () {},
      STEP_DATA_ATTR: function () {},
      THUMB_CONTAINER_SELECTOR: function () {},
      TRACK_MARKER_CONTAINER_SELECTOR: function () {},
      TRACK_SELECTOR: function () {},
    },
    numbers: { PAGE_FACTOR: function () {} },
    MDCSliderFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setupTrackMarker: function () {},
      layout: function () {},
      getValue: function () {},
      setValue: function () {},
      getMax: function () {},
      setMax: function () {},
      getMin: function () {},
      setMin: function () {},
      getStep: function () {},
      setStep: function () {},
      isDisabled: function () {},
      setDisabled: function () {},
      handleDown_: function () {},
      handleMove_: function () {},
      handleUp_: function () {},
      getClientX_: function () {},
      setValueFromEvt_: function () {},
      computeValueFromClientX_: function () {},
      handleKeydown_: function () {},
      getKeyId_: function () {},
      getValueForKeyId_: function () {},
      handleFocus_: function () {},
      handleBlur_: function () {},
      setValue_: function () {},
      quantize_: function () {},
      updateUIForCurrentValue_: function () {},
      setActive_: function () {},
      setInTransit_: function () {},
      toggleClass_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setupTrackMarker: function () {},
      layout: function () {},
      getValue: function () {},
      setValue: function () {},
      getMax: function () {},
      setMax: function () {},
      getMin: function () {},
      setMin: function () {},
      getStep: function () {},
      setStep: function () {},
      isDisabled: function () {},
      setDisabled: function () {},
      handleDown_: function () {},
      handleMove_: function () {},
      handleUp_: function () {},
      getClientX_: function () {},
      setValueFromEvt_: function () {},
      computeValueFromClientX_: function () {},
      handleKeydown_: function () {},
      getKeyId_: function () {},
      getValueForKeyId_: function () {},
      handleFocus_: function () {},
      handleBlur_: function () {},
      setValue_: function () {},
      quantize_: function () {},
      updateUIForCurrentValue_: function () {},
      setActive_: function () {},
      setInTransit_: function () {},
      toggleClass_: function () {},
    },
  },
  snackbar: {
    util: { announce: function () {} },
    MDCSnackbar: function () {},
    cssClasses: {
      CLOSING: function () {},
      OPEN: function () {},
      OPENING: function () {},
    },
    strings: {
      ACTION_SELECTOR: function () {},
      ARIA_LIVE_LABEL_TEXT_ATTR: function () {},
      CLOSED_EVENT: function () {},
      CLOSING_EVENT: function () {},
      DISMISS_SELECTOR: function () {},
      LABEL_SELECTOR: function () {},
      OPENED_EVENT: function () {},
      OPENING_EVENT: function () {},
      REASON_ACTION: function () {},
      REASON_DISMISS: function () {},
      SURFACE_SELECTOR: function () {},
    },
    numbers: {
      DEFAULT_AUTO_DISMISS_TIMEOUT_MS: function () {},
      INDETERMINATE: function () {},
      MAX_AUTO_DISMISS_TIMEOUT_MS: function () {},
      MIN_AUTO_DISMISS_TIMEOUT_MS: function () {},
      SNACKBAR_ANIMATION_CLOSE_TIME_MS: function () {},
      SNACKBAR_ANIMATION_OPEN_TIME_MS: function () {},
      ARIA_LIVE_DELAY_MS: function () {},
    },
    MDCSnackbarFoundation: {
      constructor: function () {},
      destroy: function () {},
      open: function () {},
      close: function () {},
      isOpen: function () {},
      getTimeoutMs: function () {},
      setTimeoutMs: function () {},
      getCloseOnEscape: function () {},
      setCloseOnEscape: function () {},
      handleKeyDown: function () {},
      handleActionButtonClick: function () {},
      handleActionIconClick: function () {},
      clearAutoDismissTimer_: function () {},
      handleAnimationTimerEnd_: function () {},
      runNextAnimationFrame_: function () {},
    },
    default: {
      constructor: function () {},
      destroy: function () {},
      open: function () {},
      close: function () {},
      isOpen: function () {},
      getTimeoutMs: function () {},
      setTimeoutMs: function () {},
      getCloseOnEscape: function () {},
      setCloseOnEscape: function () {},
      handleKeyDown: function () {},
      handleActionButtonClick: function () {},
      handleActionIconClick: function () {},
      clearAutoDismissTimer_: function () {},
      handleAnimationTimerEnd_: function () {},
      runNextAnimationFrame_: function () {},
    },
  },
  switchControl: {
    MDCSwitch: function () {},
    cssClasses: { CHECKED: function () {}, DISABLED: function () {} },
    strings: {
      ARIA_CHECKED_ATTR: function () {},
      NATIVE_CONTROL_SELECTOR: function () {},
      RIPPLE_SURFACE_SELECTOR: function () {},
    },
    MDCSwitchFoundation: {
      constructor: function () {},
      setChecked: function () {},
      setDisabled: function () {},
      handleChange: function () {},
      updateCheckedStyling_: function () {},
      updateAriaChecked_: function () {},
    },
    default: {
      constructor: function () {},
      setChecked: function () {},
      setDisabled: function () {},
      handleChange: function () {},
      updateCheckedStyling_: function () {},
      updateAriaChecked_: function () {},
    },
  },
  tabBar: {
    MDCTabBar: {
      constructor: function () {},
      focusOnActivate: function () {},
      useAutomaticActivation: function () {},
      initialize: function () {},
      initialSyncWithDOM: function () {},
      destroy: function () {},
      getDefaultFoundation: function () {},
      activateTab: function () {},
      scrollIntoView: function () {},
      getTabElements_: function () {},
      instantiateTabs_: function () {},
      instantiateTabScroller_: function () {},
    },
    strings: {
      ARROW_LEFT_KEY: function () {},
      ARROW_RIGHT_KEY: function () {},
      END_KEY: function () {},
      ENTER_KEY: function () {},
      HOME_KEY: function () {},
      SPACE_KEY: function () {},
      TAB_ACTIVATED_EVENT: function () {},
      TAB_SCROLLER_SELECTOR: function () {},
      TAB_SELECTOR: function () {},
    },
    numbers: {
      ARROW_LEFT_KEYCODE: function () {},
      ARROW_RIGHT_KEYCODE: function () {},
      END_KEYCODE: function () {},
      ENTER_KEYCODE: function () {},
      EXTRA_SCROLL_AMOUNT: function () {},
      HOME_KEYCODE: function () {},
      SPACE_KEYCODE: function () {},
    },
    MDCTabBarFoundation: {
      constructor: function () {},
      setUseAutomaticActivation: function () {},
      activateTab: function () {},
      handleKeyDown: function () {},
      handleTabInteraction: function () {},
      scrollIntoView: function () {},
      determineTargetFromKey_: function () {},
      calculateScrollIncrement_: function () {},
      calculateScrollIncrementRTL_: function () {},
      findAdjacentTabIndexClosestToEdge_: function () {},
      findAdjacentTabIndexClosestToEdgeRTL_: function () {},
      getKeyFromEvent_: function () {},
      isActivationKey_: function () {},
      indexIsInRange_: function () {},
      isRTL_: function () {},
      scrollIntoView_: function () {},
      scrollIntoViewRTL_: function () {},
    },
    default: {
      constructor: function () {},
      setUseAutomaticActivation: function () {},
      activateTab: function () {},
      handleKeyDown: function () {},
      handleTabInteraction: function () {},
      scrollIntoView: function () {},
      determineTargetFromKey_: function () {},
      calculateScrollIncrement_: function () {},
      calculateScrollIncrementRTL_: function () {},
      findAdjacentTabIndexClosestToEdge_: function () {},
      findAdjacentTabIndexClosestToEdgeRTL_: function () {},
      getKeyFromEvent_: function () {},
      isActivationKey_: function () {},
      indexIsInRange_: function () {},
      isRTL_: function () {},
      scrollIntoView_: function () {},
      scrollIntoViewRTL_: function () {},
    },
  },
  tabIndicator: {
    MDCTabIndicator: {
      constructor: function () {},
      initialize: function () {},
      computeContentClientRect: function () {},
      getDefaultFoundation: function () {},
      activate: function () {},
      deactivate: function () {},
    },
    cssClasses: {
      ACTIVE: function () {},
      FADE: function () {},
      NO_TRANSITION: function () {},
    },
    strings: { CONTENT_SELECTOR: function () {} },
    MDCTabIndicatorFoundation: {
      constructor: function () {},
      computeContentClientRect: function () {},
    },
    default: {
      constructor: function () {},
      computeContentClientRect: function () {},
    },
    MDCFadingTabIndicatorFoundation: {
      constructor: function () {},
      activate: function () {},
      deactivate: function () {},
    },
    MDCSlidingTabIndicatorFoundation: {
      constructor: function () {},
      activate: function () {},
      deactivate: function () {},
    },
  },
  tabScroller: {
    util: { computeHorizontalScrollbarHeight: function () {} },
    MDCTabScroller: {
      constructor: function () {},
      initialize: function () {},
      initialSyncWithDOM: function () {},
      destroy: function () {},
      getDefaultFoundation: function () {},
      getScrollPosition: function () {},
      getScrollContentWidth: function () {},
      incrementScroll: function () {},
      scrollTo: function () {},
    },
    cssClasses: {
      ANIMATING: function () {},
      SCROLL_AREA_SCROLL: function () {},
      SCROLL_TEST: function () {},
    },
    strings: {
      AREA_SELECTOR: function () {},
      CONTENT_SELECTOR: function () {},
    },
    MDCTabScrollerFoundation: {
      constructor: function () {},
      init: function () {},
      getScrollPosition: function () {},
      handleInteraction: function () {},
      handleTransitionEnd: function () {},
      incrementScroll: function () {},
      incrementScrollImmediate: function () {},
      scrollTo: function () {},
      getRTLScroller: function () {},
      calculateCurrentTranslateX_: function () {},
      clampScrollValue_: function () {},
      computeCurrentScrollPositionRTL_: function () {},
      calculateScrollEdges_: function () {},
      scrollTo_: function () {},
      scrollToRTL_: function () {},
      getIncrementScrollOperation_: function () {},
      animate_: function () {},
      stopScrollAnimation_: function () {},
      getAnimatingScrollPosition_: function () {},
      rtlScrollerFactory_: function () {},
      isRTL_: function () {},
    },
    default: {
      constructor: function () {},
      init: function () {},
      getScrollPosition: function () {},
      handleInteraction: function () {},
      handleTransitionEnd: function () {},
      incrementScroll: function () {},
      incrementScrollImmediate: function () {},
      scrollTo: function () {},
      getRTLScroller: function () {},
      calculateCurrentTranslateX_: function () {},
      clampScrollValue_: function () {},
      computeCurrentScrollPositionRTL_: function () {},
      calculateScrollEdges_: function () {},
      scrollTo_: function () {},
      scrollToRTL_: function () {},
      getIncrementScrollOperation_: function () {},
      animate_: function () {},
      stopScrollAnimation_: function () {},
      getAnimatingScrollPosition_: function () {},
      rtlScrollerFactory_: function () {},
      isRTL_: function () {},
    },
  },
  tab: {
    MDCTab: function () {},
    cssClasses: { ACTIVE: function () {} },
    strings: {
      ARIA_SELECTED: function () {},
      CONTENT_SELECTOR: function () {},
      INTERACTED_EVENT: function () {},
      RIPPLE_SELECTOR: function () {},
      TABINDEX: function () {},
      TAB_INDICATOR_SELECTOR: function () {},
    },
    MDCTabFoundation: {
      constructor: function () {},
      handleClick: function () {},
      isActive: function () {},
      setFocusOnActivate: function () {},
      activate: function () {},
      deactivate: function () {},
      computeDimensions: function () {},
    },
    default: {
      constructor: function () {},
      handleClick: function () {},
      isActive: function () {},
      setFocusOnActivate: function () {},
      activate: function () {},
      deactivate: function () {},
      computeDimensions: function () {},
    },
  },
  textField: {
    MDCTextField: function () {},
    strings: {
      ARIA_CONTROLS: function () {},
      INPUT_SELECTOR: function () {},
      LABEL_SELECTOR: function () {},
      LEADING_ICON_SELECTOR: function () {},
      LINE_RIPPLE_SELECTOR: function () {},
      OUTLINE_SELECTOR: function () {},
      TRAILING_ICON_SELECTOR: function () {},
    },
    cssClasses: {
      DENSE: function () {},
      DISABLED: function () {},
      FOCUSED: function () {},
      FULLWIDTH: function () {},
      HELPER_LINE: function () {},
      INVALID: function () {},
      NO_LABEL: function () {},
      OUTLINED: function () {},
      ROOT: function () {},
      TEXTAREA: function () {},
      WITH_LEADING_ICON: function () {},
      WITH_TRAILING_ICON: function () {},
    },
    numbers: { DENSE_LABEL_SCALE: function () {}, LABEL_SCALE: function () {} },
    VALIDATION_ATTR_WHITELIST: {
      "0": function () {},
      "1": function () {},
      "2": function () {},
      "3": function () {},
      "4": function () {},
      "5": function () {},
      "6": function () {},
    },
    ALWAYS_FLOAT_TYPES: {
      "0": function () {},
      "1": function () {},
      "2": function () {},
      "3": function () {},
      "4": function () {},
      "5": function () {},
      "6": function () {},
    },
    MDCTextFieldFoundation: {
      constructor: function () {},
      shouldAlwaysFloat_: function () {},
      shouldFloat: function () {},
      shouldShake: function () {},
      init: function () {},
      destroy: function () {},
      handleTextFieldInteraction: function () {},
      handleValidationAttributeChange: function () {},
      notchOutline: function () {},
      activateFocus: function () {},
      setTransformOrigin: function () {},
      handleInput: function () {},
      autoCompleteFocus: function () {},
      deactivateFocus: function () {},
      getValue: function () {},
      setValue: function () {},
      isValid: function () {},
      setValid: function () {},
      setUseNativeValidation: function () {},
      isDisabled: function () {},
      setDisabled: function () {},
      setHelperTextContent: function () {},
      setLeadingIconAriaLabel: function () {},
      setLeadingIconContent: function () {},
      setTrailingIconAriaLabel: function () {},
      setTrailingIconContent: function () {},
      setCharacterCounter_: function () {},
      isBadInput_: function () {},
      isNativeInputValid_: function () {},
      styleValidity_: function () {},
      styleFocused_: function () {},
      styleDisabled_: function () {},
      getNativeInput_: function () {},
    },
    default: {
      constructor: function () {},
      shouldAlwaysFloat_: function () {},
      shouldFloat: function () {},
      shouldShake: function () {},
      init: function () {},
      destroy: function () {},
      handleTextFieldInteraction: function () {},
      handleValidationAttributeChange: function () {},
      notchOutline: function () {},
      activateFocus: function () {},
      setTransformOrigin: function () {},
      handleInput: function () {},
      autoCompleteFocus: function () {},
      deactivateFocus: function () {},
      getValue: function () {},
      setValue: function () {},
      isValid: function () {},
      setValid: function () {},
      setUseNativeValidation: function () {},
      isDisabled: function () {},
      setDisabled: function () {},
      setHelperTextContent: function () {},
      setLeadingIconAriaLabel: function () {},
      setLeadingIconContent: function () {},
      setTrailingIconAriaLabel: function () {},
      setTrailingIconContent: function () {},
      setCharacterCounter_: function () {},
      isBadInput_: function () {},
      isNativeInputValid_: function () {},
      styleValidity_: function () {},
      styleFocused_: function () {},
      styleDisabled_: function () {},
      getNativeInput_: function () {},
    },
    MDCTextFieldCharacterCounter: {
      constructor: function () {},
      foundation: function () {},
      getDefaultFoundation: function () {},
    },
    MDCTextFieldCharacterCounterFoundation: {
      constructor: function () {},
      setCounterValue: function () {},
    },
    characterCountCssClasses: { ROOT: function () {} },
    characterCountStrings: { ROOT_SELECTOR: function () {} },
    MDCTextFieldHelperText: {
      constructor: function () {},
      foundation: function () {},
      getDefaultFoundation: function () {},
    },
    MDCTextFieldHelperTextFoundation: {
      constructor: function () {},
      setContent: function () {},
      setPersistent: function () {},
      setValidation: function () {},
      showToScreenReader: function () {},
      setValidity: function () {},
      hide_: function () {},
    },
    helperTextCssClasses: {
      HELPER_TEXT_PERSISTENT: function () {},
      HELPER_TEXT_VALIDATION_MSG: function () {},
      ROOT: function () {},
    },
    helperTextStrings: {
      ARIA_HIDDEN: function () {},
      ROLE: function () {},
      ROOT_SELECTOR: function () {},
    },
    MDCTextFieldIcon: {
      constructor: function () {},
      foundation: function () {},
      getDefaultFoundation: function () {},
    },
    MDCTextFieldIconFoundation: {
      constructor: function () {},
      init: function () {},
      destroy: function () {},
      setDisabled: function () {},
      setAriaLabel: function () {},
      setContent: function () {},
      handleInteraction: function () {},
    },
    iconCssClasses: { ROOT: function () {} },
    iconStrings: { ICON_EVENT: function () {}, ICON_ROLE: function () {} },
  },
  topAppBar: {
    MDCTopAppBar: {
      constructor: function () {},
      initialize: function () {},
      initialSyncWithDOM: function () {},
      destroy: function () {},
      setScrollTarget: function () {},
      getDefaultFoundation: function () {},
    },
    cssClasses: {
      FIXED_CLASS: function () {},
      FIXED_SCROLLED_CLASS: function () {},
      SHORT_CLASS: function () {},
      SHORT_COLLAPSED_CLASS: function () {},
      SHORT_HAS_ACTION_ITEM_CLASS: function () {},
    },
    numbers: {
      DEBOUNCE_THROTTLE_RESIZE_TIME_MS: function () {},
      MAX_TOP_APP_BAR_HEIGHT: function () {},
    },
    strings: {
      ACTION_ITEM_SELECTOR: function () {},
      NAVIGATION_EVENT: function () {},
      NAVIGATION_ICON_SELECTOR: function () {},
      ROOT_SELECTOR: function () {},
      TITLE_SELECTOR: function () {},
    },
    MDCTopAppBarBaseFoundation: {
      constructor: function () {},
      handleTargetScroll: function () {},
      handleWindowResize: function () {},
      handleNavigationClick: function () {},
    },
    default: {
      constructor: function () {},
      handleTargetScroll: function () {},
      handleWindowResize: function () {},
      handleNavigationClick: function () {},
    },
    MDCFixedTopAppBarFoundation: {
      constructor: function () {},
      handleTargetScroll: function () {},
    },
    MDCShortTopAppBarFoundation: {
      constructor: function () {},
      isCollapsed: function () {},
      init: function () {},
      setAlwaysCollapsed: function () {},
      getAlwaysCollapsed: function () {},
      handleTargetScroll: function () {},
      maybeCollapseBar_: function () {},
      uncollapse_: function () {},
      collapse_: function () {},
    },
    MDCTopAppBarFoundation: {
      constructor: function () {},
      destroy: function () {},
      handleTargetScroll: function () {},
      handleWindowResize: function () {},
      checkForUpdate_: function () {},
      moveTopAppBar_: function () {},
      throttledResizeHandler_: function () {},
    },
  },
};
