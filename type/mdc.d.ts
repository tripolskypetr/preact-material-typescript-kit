/**
 * @fileoverview Typedefs for mdc generated by generate-typescript-entries in browser runtime
 * @see https://gist.github.com/tripolskypetr/b9c56202cd98935a49389fb46f77ef19
 */
// tslint:disable: max-classes-per-file
// tslint:disable: variable-name
// tslint:disable: class-name
declare namespace mdc {

  export interface MDCCheckboxAdapter {
    addClass(className: string): void;
    forceLayout(): void;
    hasNativeControl(): boolean;
    isAttachedToDOM(): boolean;
    isChecked(): boolean;
    isIndeterminate(): boolean;
    removeClass(className: string): void;
    removeNativeControlAttr(attr: string): void;
    setNativeControlAttr(attr: string, value: string): void;
    setNativeControlDisabled(disabled: boolean): void;
  }


  export function autoInit(...args: any): any;
  export namespace base {
    export class MDCComponent {
      initialize: any;
      getDefaultFoundation: any;
      initialSyncWithDOM: any;
      destroy: any;
      listen: any;
      unlisten: any;
      emit: any;
    }
    export class MDCFoundation {
      init: any;
      destroy: any;
    }
  }
  export namespace checkbox {
    export var MDCCheckbox: any;
    export class cssClasses {
      ANIM_CHECKED_INDETERMINATE: any;
      ANIM_CHECKED_UNCHECKED: any;
      ANIM_INDETERMINATE_CHECKED: any;
      ANIM_INDETERMINATE_UNCHECKED: any;
      ANIM_UNCHECKED_CHECKED: any;
      ANIM_UNCHECKED_INDETERMINATE: any;
      BACKGROUND: any;
      CHECKED: any;
      CHECKMARK: any;
      CHECKMARK_PATH: any;
      DISABLED: any;
      INDETERMINATE: any;
      MIXEDMARK: any;
      NATIVE_CONTROL: any;
      ROOT: any;
      SELECTED: any;
      UPGRADED: any;
    }
    export class strings {
      ARIA_CHECKED_ATTR: any;
      ARIA_CHECKED_INDETERMINATE_VALUE: any;
      NATIVE_CONTROL_SELECTOR: any;
      TRANSITION_STATE_CHECKED: any;
      TRANSITION_STATE_INDETERMINATE: any;
      TRANSITION_STATE_INIT: any;
      TRANSITION_STATE_UNCHECKED: any;
    }
    export class numbers {
      ANIM_END_LATCH_MS: any;
    }
    export class MDCCheckboxFoundation {
      constructor(...args: any[]);
      init: any;
      destroy: any;
      setDisabled: any;
      handleAnimationEnd: any;
      handleChange: any;
      transitionCheckState_: any;
      determineCheckState_: any;
      getTransitionAnimationClass_: any;
      updateAriaChecked_: any;
    }
  }
  export namespace chips {
    export function MDCChip(...args: any): any;
    export class MDCChipFoundation {
      isSelected: any;
      setSelected: any;
      setSelectedFromChipSet: any;
      getShouldRemoveOnTrailingIconClick: any;
      setShouldRemoveOnTrailingIconClick: any;
      getDimensions: any;
      beginExit: any;
      handleInteraction: any;
      handleTransitionEnd: any;
      handleTrailingIconInteraction: any;
      handleKeydown: any;
      removeFocus: any;
      focusPrimaryAction: any;
      focusTrailingAction: any;
      focusNextAction_: any;
      getEvtSource_: any;
      getDirection_: any;
      focusPrimaryAction_: any;
      focusTrailingAction_: any;
      removeFocus_: any;
      removeChip_: any;
      shouldHandleInteraction_: any;
      shouldRemoveChip_: any;
      setSelected_: any;
      notifySelection_: any;
      notifyIgnoredSelection_: any;
    }
    export class chipCssClasses {
      CHECKMARK: any;
      CHIP_EXIT: any;
      DELETABLE: any;
      HIDDEN_LEADING_ICON: any;
      LEADING_ICON: any;
      PRIMARY_ACTION: any;
      SELECTED: any;
      TEXT: any;
      TRAILING_ACTION: any;
      TRAILING_ICON: any;
    }
    export class chipStrings {
      ADDED_ANNOUNCEMENT_ATTRIBUTE: any;
      ARIA_CHECKED: any;
      ARROW_DOWN_KEY: any;
      ARROW_LEFT_KEY: any;
      ARROW_RIGHT_KEY: any;
      ARROW_UP_KEY: any;
      BACKSPACE_KEY: any;
      CHECKMARK_SELECTOR: any;
      DELETE_KEY: any;
      END_KEY: any;
      ENTER_KEY: any;
      ENTRY_ANIMATION_NAME: any;
      HOME_KEY: any;
      INTERACTION_EVENT: any;
      LEADING_ICON_SELECTOR: any;
      NAVIGATION_EVENT: any;
      PRIMARY_ACTION_SELECTOR: any;
      REMOVED_ANNOUNCEMENT_ATTRIBUTE: any;
      REMOVAL_EVENT: any;
      SELECTION_EVENT: any;
      SPACEBAR_KEY: any;
      TAB_INDEX: any;
      TRAILING_ACTION_SELECTOR: any;
      TRAILING_ICON_INTERACTION_EVENT: any;
      TRAILING_ICON_SELECTOR: any;
    }
    export function MDCChipSet(...args: any): any;
    export class MDCChipSetFoundation {
      getSelectedChipIds: any;
      select: any;
      handleChipInteraction: any;
      handleChipSelection: any;
      handleChipRemoval: any;
      handleChipNavigation: any;
      focusChipAction_: any;
      getDirection_: any;
      deselect_: any;
      deselectAndNotifyClients_: any;
      toggleSelect_: any;
      removeFocusFromChipsExcept_: any;
      selectAndNotifyClients_: any;
      select_: any;
    }
    export class chipSetCssClasses {
      CHOICE: any;
      FILTER: any;
    }
    export class chipSetStrings {
      CHIP_SELECTOR: any;
    }
  }
  export namespace dataTable {
    export namespace MDCDataTable {
      export function initialize(...args: any): any;
      export function initialSyncWithDOM(...args: any): any;
      export function layout(...args: any): any;
      export function getRows(...args: any): any;
      export function getSelectedRowIds(...args: any): any;
      export function setSelectedRowIds(...args: any): any;
      export function destroy(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
      export function getRowByIndex_(...args: any): any;
      export function getRowIdByIndex_(...args: any): any;
    }
    export class MDCDataTableFoundation {
      layout: any;
      layoutAsync: any;
      getRows: any;
      setSelectedRowIds: any;
      getSelectedRowIds: any;
      handleHeaderRowCheckboxChange: any;
      handleRowCheckboxChange: any;
      setHeaderRowCheckboxState_: any;
      selectRowAtIndex_: any;
    }
    export class cssClasses {
      CELL: any;
      CELL_NUMERIC: any;
      CONTENT: any;
      HEADER_ROW: any;
      HEADER_ROW_CHECKBOX: any;
      ROOT: any;
      ROW: any;
      ROW_CHECKBOX: any;
      ROW_SELECTED: any;
    }
    export class strings {
      ARIA_SELECTED: any;
      DATA_ROW_ID_ATTR: any;
      HEADER_ROW_CHECKBOX_SELECTOR: any;
      ROW_CHECKBOX_SELECTOR: any;
      ROW_SELECTED_SELECTOR: any;
      ROW_SELECTOR: any;
    }
    export class events {
      ROW_SELECTION_CHANGED: any;
      SELECTED_ALL: any;
      UNSELECTED_ALL: any;
    }
  }
  export namespace dialog {
    export class util {
      createFocusTrapInstance: any;
      isScrollable: any;
      areTopsMisaligned: any;
    }
    export function MDCDialog(...args: any): any;
    export class cssClasses {
      CLOSING: any;
      OPEN: any;
      OPENING: any;
      SCROLLABLE: any;
      SCROLL_LOCK: any;
      STACKED: any;
    }
    export class strings {
      ACTION_ATTRIBUTE: any;
      BUTTON_DEFAULT_ATTRIBUTE: any;
      BUTTON_SELECTOR: any;
      CLOSED_EVENT: any;
      CLOSE_ACTION: any;
      CLOSING_EVENT: any;
      CONTAINER_SELECTOR: any;
      CONTENT_SELECTOR: any;
      DESTROY_ACTION: any;
      INITIAL_FOCUS_ATTRIBUTE: any;
      OPENED_EVENT: any;
      OPENING_EVENT: any;
      SCRIM_SELECTOR: any;
      SUPPRESS_DEFAULT_PRESS_SELECTOR: any;
      SURFACE_SELECTOR: any;
    }
    export class numbers {
      DIALOG_ANIMATION_CLOSE_TIME_MS: any;
      DIALOG_ANIMATION_OPEN_TIME_MS: any;
    }
    export class MDCDialogFoundation {
      init: any;
      destroy: any;
      open: any;
      close: any;
      isOpen: any;
      getEscapeKeyAction: any;
      setEscapeKeyAction: any;
      getScrimClickAction: any;
      setScrimClickAction: any;
      getAutoStackButtons: any;
      setAutoStackButtons: any;
      layout: any;
      handleClick: any;
      handleKeydown: any;
      handleDocumentKeydown: any;
      layoutInternal_: any;
      handleAnimationTimerEnd_: any;
      runNextAnimationFrame_: any;
      detectStackedButtons_: any;
      detectScrollableContent_: any;
    }
  }
  export namespace dom {
    export class events {
      applyPassive: any;
    }
    export namespace focusTrap {
      export class FocusTrap {
        trapFocus: any;
        releaseFocus: any;
        wrapTabFocus: any;
        focusInitialElement: any;
        getFocusableElements: any;
        createSentinel: any;
      }
    }
    export class ponyfill {
      closest: any;
      matches: any;
      estimateScrollWidth: any;
    }
  }
  export namespace drawer {
    export class util {
      createFocusTrapInstance: any;
    }
    export function MDCDrawer(...args: any): any;
    export class cssClasses {
      ANIMATE: any;
      CLOSING: any;
      DISMISSIBLE: any;
      MODAL: any;
      OPEN: any;
      OPENING: any;
      ROOT: any;
    }
    export class strings {
      APP_CONTENT_SELECTOR: any;
      CLOSE_EVENT: any;
      OPEN_EVENT: any;
      SCRIM_SELECTOR: any;
    }
    export class MDCDismissibleDrawerFoundation {
      destroy: any;
      open: any;
      close: any;
      isOpen: any;
      isOpening: any;
      isClosing: any;
      handleKeydown: any;
      handleTransitionEnd: any;
      opened_: any;
      closed_: any;
      runNextAnimationFrame_: any;
      isElement_: any;
    }
    export class MDCModalDrawerFoundation {
      handleScrimClick: any;
      opened_: any;
      closed_: any;
    }
  }
  export namespace floatingLabel {
    export namespace MDCFloatingLabel {
      export function shake(...args: any): any;
      export function float(...args: any): any;
      export function getWidth(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class cssClasses {
      LABEL_FLOAT_ABOVE: any;
      LABEL_SHAKE: any;
      ROOT: any;
    }
    export class MDCFloatingLabelFoundation {
      init: any;
      destroy: any;
      getWidth: any;
      shake: any;
      float: any;
      handleShakeAnimationEnd_: any;
    }
  }
  export namespace formField {
    export var MDCFormField: any;
    export class cssClasses {
      ROOT: any;
    }
    export class strings {
      LABEL_SELECTOR: any;
    }
    export class MDCFormFieldFoundation {
      init: any;
      destroy: any;
      handleClick_: any;
    }
  }
  export namespace iconButton {
    export function MDCIconButtonToggle(...args: any): any;
    export class cssClasses {
      ICON_BUTTON_ON: any;
      ROOT: any;
    }
    export class strings {
      ARIA_PRESSED: any;
      CHANGE_EVENT: any;
    }
    export class MDCIconButtonToggleFoundation {
      init: any;
      handleClick: any;
      isOn: any;
      toggle: any;
    }
  }
  export namespace lineRipple {
    export namespace MDCLineRipple {
      export function activate(...args: any): any;
      export function deactivate(...args: any): any;
      export function setRippleCenter(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class cssClasses {
      LINE_RIPPLE_ACTIVE: any;
      LINE_RIPPLE_DEACTIVATING: any;
    }
    export class MDCLineRippleFoundation {
      init: any;
      destroy: any;
      activate: any;
      setRippleCenter: any;
      deactivate: any;
      handleTransitionEnd: any;
    }
  }
  export namespace linearProgress {
    export namespace MDCLinearProgress {
      export function determinate(...args: any): any;
      export function progress(...args: any): any;
      export function buffer(...args: any): any;
      export function reverse(...args: any): any;
      export function open(...args: any): any;
      export function close(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class cssClasses {
      CLOSED_CLASS: any;
      INDETERMINATE_CLASS: any;
      REVERSED_CLASS: any;
    }
    export class strings {
      ARIA_VALUENOW: any;
      BUFFER_SELECTOR: any;
      PRIMARY_BAR_SELECTOR: any;
    }
    export class MDCLinearProgressFoundation {
      init: any;
      setDeterminate: any;
      setProgress: any;
      setBuffer: any;
      setReverse: any;
      open: any;
      close: any;
      setScale_: any;
    }
  }
  export namespace list {
    export function MDCList(...args: any): any;
    export class cssClasses {
      LIST_ITEM_ACTIVATED_CLASS: any;
      LIST_ITEM_CLASS: any;
      LIST_ITEM_DISABLED_CLASS: any;
      LIST_ITEM_SELECTED_CLASS: any;
      ROOT: any;
    }
    export class strings {
      ACTION_EVENT: any;
      ARIA_CHECKED: any;
      ARIA_CHECKED_CHECKBOX_SELECTOR: any;
      ARIA_CHECKED_RADIO_SELECTOR: any;
      ARIA_CURRENT: any;
      ARIA_DISABLED: any;
      ARIA_ORIENTATION: any;
      ARIA_ORIENTATION_HORIZONTAL: any;
      ARIA_ROLE_CHECKBOX_SELECTOR: any;
      ARIA_SELECTED: any;
      CHECKBOX_RADIO_SELECTOR: any;
      CHECKBOX_SELECTOR: any;
      CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: any;
      FOCUSABLE_CHILD_ELEMENTS: any;
      RADIO_SELECTOR: any;
    }
    export class numbers {
      UNSET_INDEX: any;
    }
    export class MDCListFoundation {
      layout: any;
      setWrapFocus: any;
      setVerticalOrientation: any;
      setSingleSelection: any;
      setUseActivatedClass: any;
      getSelectedIndex: any;
      setSelectedIndex: any;
      handleFocusIn: any;
      handleFocusOut: any;
      handleKeydown: any;
      handleClick: any;
      focusNextElement: any;
      focusPrevElement: any;
      focusFirstElement: any;
      focusLastElement: any;
      setEnabled: any;
      preventDefaultEvent_: any;
      setSingleSelectionAtIndex_: any;
      setAriaForSingleSelectionAtIndex_: any;
      setRadioAtIndex_: any;
      setCheckboxAtIndex_: any;
      setTabindexAtIndex_: any;
      isSelectableList_: any;
      setTabindexToFirstSelectedItem_: any;
      isIndexValid_: any;
      isIndexInRange_: any;
      setSelectedIndexOnAction_: any;
      toggleCheckboxAtIndex_: any;
    }
  }
  export namespace menuSurface {
    export class util {
      getTransformPropertyName: any;
    }
    export namespace MDCMenuSurface {
      export function initialSyncWithDOM(...args: any): any;
      export function destroy(...args: any): any;
      export function isOpen(...args: any): any;
      export function open(...args: any): any;
      export function close(...args: any): any;
      export function quickOpen(...args: any): any;
      export function setIsHoisted(...args: any): any;
      export function setMenuSurfaceAnchorElement(...args: any): any;
      export function setFixedPosition(...args: any): any;
      export function setAbsolutePosition(...args: any): any;
      export function setAnchorCorner(...args: any): any;
      export function setAnchorMargin(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class cssClasses {
      ANCHOR: any;
      ANIMATING_CLOSED: any;
      ANIMATING_OPEN: any;
      FIXED: any;
      OPEN: any;
      ROOT: any;
    }
    export class strings {
      CLOSED_EVENT: any;
      OPENED_EVENT: any;
      FOCUSABLE_ELEMENTS: any;
    }
    export class numbers {
      TRANSITION_OPEN_DURATION: any;
      TRANSITION_CLOSE_DURATION: any;
      MARGIN_TO_EDGE: any;
      ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: any;
    }
    export class CornerBit {
      BOTTOM: any;
      CENTER: any;
      RIGHT: any;
      FLIP_RTL: any;
    }
    export namespace Corner {
      export function TOP_LEFT(...args: any): any;
      export function TOP_RIGHT(...args: any): any;
      export function BOTTOM_LEFT(...args: any): any;
      export function BOTTOM_RIGHT(...args: any): any;
      export function TOP_START(...args: any): any;
      export function TOP_END(...args: any): any;
      export function BOTTOM_START(...args: any): any;
      export function BOTTOM_END(...args: any): any;
    }
    export class MDCMenuSurfaceFoundation {
      init: any;
      destroy: any;
      setAnchorCorner: any;
      setAnchorMargin: any;
      setIsHoisted: any;
      setFixedPosition: any;
      setAbsolutePosition: any;
      setQuickOpen: any;
      isOpen: any;
      open: any;
      close: any;
      handleBodyClick: any;
      handleKeydown: any;
      autoPosition_: any;
      getAutoLayoutMeasurements_: any;
      getOriginCorner_: any;
      getMenuSurfaceMaxHeight_: any;
      getHorizontalOriginOffset_: any;
      getVerticalOriginOffset_: any;
      adjustPositionForHoistedElement_: any;
      maybeRestoreFocus_: any;
      hasBit_: any;
      setBit_: any;
      isFinite_: any;
    }
  }
  export namespace menu {
    export class Corner {
      TOP_LEFT: any;
      TOP_RIGHT: any;
      BOTTOM_LEFT: any;
      BOTTOM_RIGHT: any;
      TOP_START: any;
      TOP_END: any;
      BOTTOM_START: any;
      BOTTOM_END: any;
    }
    export function MDCMenu(...args: any): any;
    export class cssClasses {
      MENU_SELECTED_LIST_ITEM: any;
      MENU_SELECTION_GROUP: any;
      ROOT: any;
    }
    export class strings {
      ARIA_CHECKED_ATTR: any;
      ARIA_DISABLED_ATTR: any;
      CHECKBOX_SELECTOR: any;
      LIST_SELECTOR: any;
      SELECTED_EVENT: any;
    }
    export class numbers {
      FOCUS_ROOT_INDEX: any;
    }
    export class DefaultFocusState {
      NONE: any;
      LIST_ROOT: any;
      FIRST_ITEM: any;
      LAST_ITEM: any;
    }
    export class MDCMenuFoundation {
      destroy: any;
      handleKeydown: any;
      handleItemAction: any;
      handleMenuSurfaceOpened: any;
      setDefaultFocusState: any;
      setSelectedIndex: any;
      setEnabled: any;
      validatedIndex_: any;
    }
  }
  export namespace notchedOutline {
    export namespace MDCNotchedOutline {
      export function initialSyncWithDOM(...args: any): any;
      export function notch(...args: any): any;
      export function closeNotch(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class strings {
      NOTCH_ELEMENT_SELECTOR: any;
    }
    export class numbers {
      NOTCH_ELEMENT_PADDING: any;
    }
    export class cssClasses {
      NO_LABEL: any;
      OUTLINE_NOTCHED: any;
      OUTLINE_UPGRADED: any;
    }
    export class MDCNotchedOutlineFoundation {
      notch: any;
      closeNotch: any;
    }
  }
  export namespace radio {
    export class MDCRadio {
      constructor(...args: any);
    }
    export class strings {
      NATIVE_CONTROL_SELECTOR: any;
    }
    export class cssClasses {
      DISABLED: any;
      ROOT: any;
    }
    export class MDCRadioFoundation {
      constructor(...args: any[]);
      setDisabled: any;
    }
  }
  export namespace ripple {
    export class util {
      supportsCssVariables: any;
      getNormalizedEventCoords: any;
    }
    export class MDCRipple {
      constructor(...args: any);
      unbounded(...args: any): any;
      activate(...args: any): any;
      deactivate(...args: any): any;
      layout(...args: any): any;
      getDefaultFoundation(...args: any): any;
      initialSyncWithDOM(...args: any): any;
      setUnbounded_(...args: any): any;
    }
    export class cssClasses {
      BG_FOCUSED: any;
      FG_ACTIVATION: any;
      FG_DEACTIVATION: any;
      ROOT: any;
      UNBOUNDED: any;
    }
    export class strings {
      VAR_FG_SCALE: any;
      VAR_FG_SIZE: any;
      VAR_FG_TRANSLATE_END: any;
      VAR_FG_TRANSLATE_START: any;
      VAR_LEFT: any;
      VAR_TOP: any;
    }
    export class numbers {
      DEACTIVATION_TIMEOUT_MS: any;
      FG_DEACTIVATION_MS: any;
      INITIAL_ORIGIN_SCALE: any;
      PADDING: any;
      TAP_DELAY_MS: any;
    }
    export class MDCRippleFoundation {
      init: any;
      destroy: any;
      activate: any;
      deactivate: any;
      layout: any;
      setUnbounded: any;
      handleFocus: any;
      handleBlur: any;
      supportsPressRipple_: any;
      defaultActivationState_: any;
      registerRootHandlers_: any;
      registerDeactivationHandlers_: any;
      deregisterRootHandlers_: any;
      deregisterDeactivationHandlers_: any;
      removeCssVars_: any;
      activate_: any;
      checkElementMadeActive_: any;
      animateActivation_: any;
      getFgTranslationCoordinates_: any;
      runDeactivationUXLogicIfReady_: any;
      rmBoundedActivationClasses_: any;
      resetActivationState_: any;
      deactivate_: any;
      animateDeactivation_: any;
      layoutInternal_: any;
      updateLayoutCssVars_: any;
    }
  }
  export namespace select {
    export function MDCSelect(...args: any): any;
    export class cssClasses {
      ACTIVATED: any;
      DISABLED: any;
      FOCUSED: any;
      INVALID: any;
      OUTLINED: any;
      REQUIRED: any;
      ROOT: any;
      SELECTED_ITEM_CLASS: any;
      WITH_LEADING_ICON: any;
    }
    export class strings {
      ARIA_CONTROLS: any;
      ARIA_SELECTED_ATTR: any;
      CHANGE_EVENT: any;
      LABEL_SELECTOR: any;
      LEADING_ICON_SELECTOR: any;
      LINE_RIPPLE_SELECTOR: any;
      MENU_SELECTOR: any;
      OUTLINE_SELECTOR: any;
      SELECTED_ITEM_SELECTOR: any;
      SELECTED_TEXT_SELECTOR: any;
      SELECT_ANCHOR_SELECTOR: any;
      VALUE_ATTR: any;
    }
    export class numbers {
      LABEL_SCALE: any;
      UNSET_INDEX: any;
    }
    export class MDCSelectFoundation {
      getSelectedIndex: any;
      setSelectedIndex: any;
      setValue: any;
      getValue: any;
      getDisabled: any;
      setDisabled: any;
      setHelperTextContent: any;
      layout: any;
      handleMenuOpened: any;
      handleMenuClosed: any;
      handleChange: any;
      handleMenuItemAction: any;
      handleFocus: any;
      handleBlur: any;
      handleClick: any;
      handleKeydown: any;
      notchOutline: any;
      setLeadingIconAriaLabel: any;
      setLeadingIconContent: any;
      setValid: any;
      isValid: any;
      setRequired: any;
      getRequired: any;
      init: any;
      updateLabel_: any;
      blur_: any;
    }
    export namespace MDCSelectHelperText {
      export function foundation(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class MDCSelectHelperTextFoundation {
      setContent: any;
      setPersistent: any;
      setValidation: any;
      showToScreenReader: any;
      setValidity: any;
      hide_: any;
    }
    export class helperTextCssClasses {
      HELPER_TEXT_PERSISTENT: any;
      HELPER_TEXT_VALIDATION_MSG: any;
    }
    export class helperTextStrings {
      ARIA_HIDDEN: any;
      ROLE: any;
    }
    export namespace MDCSelectIcon {
      export function foundation(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class MDCSelectIconFoundation {
      init: any;
      destroy: any;
      setDisabled: any;
      setAriaLabel: any;
      setContent: any;
      handleInteraction: any;
    }
    export class iconStrings {
      ICON_EVENT: any;
      ICON_ROLE: any;
    }
  }
  export namespace slider {
    export function MDCSlider(...args: any): any;
    export class cssClasses {
      ACTIVE: any;
      DISABLED: any;
      DISCRETE: any;
      FOCUS: any;
      HAS_TRACK_MARKER: any;
      IN_TRANSIT: any;
      IS_DISCRETE: any;
    }
    export class strings {
      ARIA_DISABLED: any;
      ARIA_VALUEMAX: any;
      ARIA_VALUEMIN: any;
      ARIA_VALUENOW: any;
      CHANGE_EVENT: any;
      INPUT_EVENT: any;
      PIN_VALUE_MARKER_SELECTOR: any;
      STEP_DATA_ATTR: any;
      THUMB_CONTAINER_SELECTOR: any;
      TRACK_MARKER_CONTAINER_SELECTOR: any;
      TRACK_SELECTOR: any;
    }
    export class numbers {
      PAGE_FACTOR: any;
    }
    export class MDCSliderFoundation {
      init: any;
      destroy: any;
      setupTrackMarker: any;
      layout: any;
      getValue: any;
      setValue: any;
      getMax: any;
      setMax: any;
      getMin: any;
      setMin: any;
      getStep: any;
      setStep: any;
      isDisabled: any;
      setDisabled: any;
      handleDown_: any;
      handleMove_: any;
      handleUp_: any;
      getClientX_: any;
      setValueFromEvt_: any;
      computeValueFromClientX_: any;
      handleKeydown_: any;
      getKeyId_: any;
      getValueForKeyId_: any;
      handleFocus_: any;
      handleBlur_: any;
      setValue_: any;
      quantize_: any;
      updateUIForCurrentValue_: any;
      setActive_: any;
      setInTransit_: any;
      toggleClass_: any;
    }
  }
  export namespace snackbar {
    export class util {
      announce: any;
    }
    export function MDCSnackbar(...args: any): any;
    export class cssClasses {
      CLOSING: any;
      OPEN: any;
      OPENING: any;
    }
    export class strings {
      ACTION_SELECTOR: any;
      ARIA_LIVE_LABEL_TEXT_ATTR: any;
      CLOSED_EVENT: any;
      CLOSING_EVENT: any;
      DISMISS_SELECTOR: any;
      LABEL_SELECTOR: any;
      OPENED_EVENT: any;
      OPENING_EVENT: any;
      REASON_ACTION: any;
      REASON_DISMISS: any;
      SURFACE_SELECTOR: any;
    }
    export class numbers {
      DEFAULT_AUTO_DISMISS_TIMEOUT_MS: any;
      INDETERMINATE: any;
      MAX_AUTO_DISMISS_TIMEOUT_MS: any;
      MIN_AUTO_DISMISS_TIMEOUT_MS: any;
      SNACKBAR_ANIMATION_CLOSE_TIME_MS: any;
      SNACKBAR_ANIMATION_OPEN_TIME_MS: any;
      ARIA_LIVE_DELAY_MS: any;
    }
    export class MDCSnackbarFoundation {
      destroy: any;
      open: any;
      close: any;
      isOpen: any;
      getTimeoutMs: any;
      setTimeoutMs: any;
      getCloseOnEscape: any;
      setCloseOnEscape: any;
      handleKeyDown: any;
      handleActionButtonClick: any;
      handleActionIconClick: any;
      clearAutoDismissTimer_: any;
      handleAnimationTimerEnd_: any;
      runNextAnimationFrame_: any;
    }
  }
  export namespace switchControl {
    export function MDCSwitch(...args: any): any;
    export class cssClasses {
      CHECKED: any;
      DISABLED: any;
    }
    export class strings {
      ARIA_CHECKED_ATTR: any;
      NATIVE_CONTROL_SELECTOR: any;
      RIPPLE_SURFACE_SELECTOR: any;
    }
    export class MDCSwitchFoundation {
      setChecked: any;
      setDisabled: any;
      handleChange: any;
      updateCheckedStyling_: any;
      updateAriaChecked_: any;
    }
  }
  export namespace tabBar {
    export namespace MDCTabBar {
      export function focusOnActivate(...args: any): any;
      export function useAutomaticActivation(...args: any): any;
      export function initialize(...args: any): any;
      export function initialSyncWithDOM(...args: any): any;
      export function destroy(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
      export function activateTab(...args: any): any;
      export function scrollIntoView(...args: any): any;
      export function getTabElements_(...args: any): any;
      export function instantiateTabs_(...args: any): any;
      export function instantiateTabScroller_(...args: any): any;
    }
    export class strings {
      ARROW_LEFT_KEY: any;
      ARROW_RIGHT_KEY: any;
      END_KEY: any;
      ENTER_KEY: any;
      HOME_KEY: any;
      SPACE_KEY: any;
      TAB_ACTIVATED_EVENT: any;
      TAB_SCROLLER_SELECTOR: any;
      TAB_SELECTOR: any;
    }
    export class numbers {
      ARROW_LEFT_KEYCODE: any;
      ARROW_RIGHT_KEYCODE: any;
      END_KEYCODE: any;
      ENTER_KEYCODE: any;
      EXTRA_SCROLL_AMOUNT: any;
      HOME_KEYCODE: any;
      SPACE_KEYCODE: any;
    }
    export class MDCTabBarFoundation {
      setUseAutomaticActivation: any;
      activateTab: any;
      handleKeyDown: any;
      handleTabInteraction: any;
      scrollIntoView: any;
      determineTargetFromKey_: any;
      calculateScrollIncrement_: any;
      calculateScrollIncrementRTL_: any;
      findAdjacentTabIndexClosestToEdge_: any;
      findAdjacentTabIndexClosestToEdgeRTL_: any;
      getKeyFromEvent_: any;
      isActivationKey_: any;
      indexIsInRange_: any;
      isRTL_: any;
      scrollIntoView_: any;
      scrollIntoViewRTL_: any;
    }
  }
  export namespace tabIndicator {
    export namespace MDCTabIndicator {
      export function initialize(...args: any): any;
      export function computeContentClientRect(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
      export function activate(...args: any): any;
      export function deactivate(...args: any): any;
    }
    export class cssClasses {
      ACTIVE: any;
      FADE: any;
      NO_TRANSITION: any;
    }
    export class strings {
      CONTENT_SELECTOR: any;
    }
    export class MDCTabIndicatorFoundation {
      computeContentClientRect: any;
    }
    export class MDCFadingTabIndicatorFoundation {
      activate: any;
      deactivate: any;
    }
    export class MDCSlidingTabIndicatorFoundation {
      activate: any;
      deactivate: any;
    }
  }
  export namespace tabScroller {
    export class util {
      computeHorizontalScrollbarHeight: any;
    }
    export namespace MDCTabScroller {
      export function initialize(...args: any): any;
      export function initialSyncWithDOM(...args: any): any;
      export function destroy(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
      export function getScrollPosition(...args: any): any;
      export function getScrollContentWidth(...args: any): any;
      export function incrementScroll(...args: any): any;
      export function scrollTo(...args: any): any;
    }
    export class cssClasses {
      ANIMATING: any;
      SCROLL_AREA_SCROLL: any;
      SCROLL_TEST: any;
    }
    export class strings {
      AREA_SELECTOR: any;
      CONTENT_SELECTOR: any;
    }
    export class MDCTabScrollerFoundation {
      init: any;
      getScrollPosition: any;
      handleInteraction: any;
      handleTransitionEnd: any;
      incrementScroll: any;
      incrementScrollImmediate: any;
      scrollTo: any;
      getRTLScroller: any;
      calculateCurrentTranslateX_: any;
      clampScrollValue_: any;
      computeCurrentScrollPositionRTL_: any;
      calculateScrollEdges_: any;
      scrollTo_: any;
      scrollToRTL_: any;
      getIncrementScrollOperation_: any;
      animate_: any;
      stopScrollAnimation_: any;
      getAnimatingScrollPosition_: any;
      rtlScrollerFactory_: any;
      isRTL_: any;
    }
  }
  export namespace tab {
    export function MDCTab(...args: any): any;
    export class cssClasses {
      ACTIVE: any;
    }
    export class strings {
      ARIA_SELECTED: any;
      CONTENT_SELECTOR: any;
      INTERACTED_EVENT: any;
      RIPPLE_SELECTOR: any;
      TABINDEX: any;
      TAB_INDICATOR_SELECTOR: any;
    }
    export class MDCTabFoundation {
      handleClick: any;
      isActive: any;
      setFocusOnActivate: any;
      activate: any;
      deactivate: any;
      computeDimensions: any;
    }
  }
  export namespace textField {
    export function MDCTextField(...args: any): any;
    export class strings {
      ARIA_CONTROLS: any;
      INPUT_SELECTOR: any;
      LABEL_SELECTOR: any;
      LEADING_ICON_SELECTOR: any;
      LINE_RIPPLE_SELECTOR: any;
      OUTLINE_SELECTOR: any;
      TRAILING_ICON_SELECTOR: any;
    }
    export class cssClasses {
      DENSE: any;
      DISABLED: any;
      FOCUSED: any;
      FULLWIDTH: any;
      HELPER_LINE: any;
      INVALID: any;
      NO_LABEL: any;
      OUTLINED: any;
      ROOT: any;
      TEXTAREA: any;
      WITH_LEADING_ICON: any;
      WITH_TRAILING_ICON: any;
    }
    export class numbers {
      DENSE_LABEL_SCALE: any;
      LABEL_SCALE: any;
    }
    export class VALIDATION_ATTR_WHITELIST {}
    export class ALWAYS_FLOAT_TYPES {}
    export class MDCTextFieldFoundation {
      shouldAlwaysFloat_: any;
      shouldFloat: any;
      shouldShake: any;
      init: any;
      destroy: any;
      handleTextFieldInteraction: any;
      handleValidationAttributeChange: any;
      notchOutline: any;
      activateFocus: any;
      setTransformOrigin: any;
      handleInput: any;
      autoCompleteFocus: any;
      deactivateFocus: any;
      getValue: any;
      setValue: any;
      isValid: any;
      setValid: any;
      setUseNativeValidation: any;
      isDisabled: any;
      setDisabled: any;
      setHelperTextContent: any;
      setLeadingIconAriaLabel: any;
      setLeadingIconContent: any;
      setTrailingIconAriaLabel: any;
      setTrailingIconContent: any;
      setCharacterCounter_: any;
      isBadInput_: any;
      isNativeInputValid_: any;
      styleValidity_: any;
      styleFocused_: any;
      styleDisabled_: any;
      getNativeInput_: any;
    }
    export namespace MDCTextFieldCharacterCounter {
      export function foundation(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class MDCTextFieldCharacterCounterFoundation {
      setCounterValue: any;
    }
    export class characterCountCssClasses {
      ROOT: any;
    }
    export class characterCountStrings {
      ROOT_SELECTOR: any;
    }
    export namespace MDCTextFieldHelperText {
      export function foundation(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class MDCTextFieldHelperTextFoundation {
      setContent: any;
      setPersistent: any;
      setValidation: any;
      showToScreenReader: any;
      setValidity: any;
      hide_: any;
    }
    export class helperTextCssClasses {
      HELPER_TEXT_PERSISTENT: any;
      HELPER_TEXT_VALIDATION_MSG: any;
      ROOT: any;
    }
    export class helperTextStrings {
      ARIA_HIDDEN: any;
      ROLE: any;
      ROOT_SELECTOR: any;
    }
    export namespace MDCTextFieldIcon {
      export function foundation(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class MDCTextFieldIconFoundation {
      init: any;
      destroy: any;
      setDisabled: any;
      setAriaLabel: any;
      setContent: any;
      handleInteraction: any;
    }
    export class iconCssClasses {
      ROOT: any;
    }
    export class iconStrings {
      ICON_EVENT: any;
      ICON_ROLE: any;
    }
  }
  export namespace topAppBar {
    export namespace MDCTopAppBar {
      export function initialize(...args: any): any;
      export function initialSyncWithDOM(...args: any): any;
      export function destroy(...args: any): any;
      export function setScrollTarget(...args: any): any;
      export function getDefaultFoundation(...args: any): any;
    }
    export class cssClasses {
      FIXED_CLASS: any;
      FIXED_SCROLLED_CLASS: any;
      SHORT_CLASS: any;
      SHORT_COLLAPSED_CLASS: any;
      SHORT_HAS_ACTION_ITEM_CLASS: any;
    }
    export class numbers {
      DEBOUNCE_THROTTLE_RESIZE_TIME_MS: any;
      MAX_TOP_APP_BAR_HEIGHT: any;
    }
    export class strings {
      ACTION_ITEM_SELECTOR: any;
      NAVIGATION_EVENT: any;
      NAVIGATION_ICON_SELECTOR: any;
      ROOT_SELECTOR: any;
      TITLE_SELECTOR: any;
    }
    export class MDCTopAppBarBaseFoundation {
      handleTargetScroll: any;
      handleWindowResize: any;
      handleNavigationClick: any;
    }
    export class MDCFixedTopAppBarFoundation {
      handleTargetScroll: any;
    }
    export class MDCShortTopAppBarFoundation {
      isCollapsed: any;
      init: any;
      setAlwaysCollapsed: any;
      getAlwaysCollapsed: any;
      handleTargetScroll: any;
      maybeCollapseBar_: any;
      uncollapse_: any;
      collapse_: any;
    }
    export class MDCTopAppBarFoundation {
      destroy: any;
      handleTargetScroll: any;
      handleWindowResize: any;
      checkForUpdate_: any;
      moveTopAppBar_: any;
      throttledResizeHandler_: any;
    }
  }
}
